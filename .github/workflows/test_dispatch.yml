name: Dispatch test

on:
  workflow_dispatch:
    inputs:
      spreadsheet_id:
        description: ''
        required: false
        default: '16iUpjhWnPYDo4OUwxv1TlF9x975iPJ2WABgmpoJJdNY'
      spreadsheet_name:
        description: ''
        required: false
        default: 'Sheet1'
      spreadsheet_range:
        description: ''
        required: false
        default: 'A1:D99'
      dolt_remote:
        description: ''
        required: false
        default: 'max-hoffman/dolt_action_test'
      dolt_branch:
        description: ''
        required: false
        default: 'master'
      dolt_push:
        description: ''
        required: false
        default: false
      dolt_tablename:
        description: ''
        required: false
        default: 'aminals'
jobs:
  hello_world_job:
    runs-on: ubuntu-latest
    name: POC
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: GSheet
        id: 'update_worksheet'
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ github.event.inputs.spreadsheet_id }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "range": "'Sheet1'!${range}" } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
          RANGE: ${{ github.event.inputs.range }}
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Dolt Import
        uses: ./ # Uses an action in the root directory
        id: 'dolt_import'
        env:
          results: ${{ steps.update_worksheet.outputs.results }}
          tablename: ${{ github.event.inputs.dolt_tablename }}
        with:
          run: |
            dolt sql -q "create table if not exists $tablename (id bigint primary key, name text, speed bigint)"
            echo "$results" | jq -r '.results[0].result.rawData | .[0], .[1:][] | @csv' > tmp.csv
            dolt table import -r --pk=id --file-type csv $tablename tmp.csv
          remote: ${{ github.event.inputs.dolt_remote }}
          message: ${{ steps.date.outputs.date }}
          push: ${{ github.event.inputs.dolt_push }}
          branch: ${{ github.event.inputs.dolt_branch }}
          commit_user_email: max@dolthub.com
          commit_author: 'Max Hoffman'
          dolthub_credential: ${{ secrets.DOLTHUB_CREDENTIAL }}
